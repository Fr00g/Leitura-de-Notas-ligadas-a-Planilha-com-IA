/*
  processarNotas_generico.js
  Versão genérica do script "Processar Notas" para Google Apps Script.

  INSTRUÇÕES RÁPIDAS:
  1) Copie este arquivo para um projeto no https://script.google.com/
  2) Substitua os valores de PASTA_ID e PLANILHA_ID.
  3) Opcional: informe API_KEY se preferir usar Cloud Vision (recomendado se Drive.Files.insert não funcionar).
  4) Se usar OCR via Drive (Drive.Files.insert), ative o Advanced Drive Service no editor (Services -> Drive API).
  5) Ative as APIs necessárias no Google Cloud Console (Drive, Sheets e, se usar, Vision).

  Observação: alguns ambientes novos não suportam Drive.Files.insert; se esse for o caso, informe API_KEY
  (Cloud Vision) e o script usará essa rota.
*/

// --------- CONFIGURAÇÃO ---------
var PASTA_ID = 'COLE_AQUI_ID_DA_PASTA';      // ID da pasta do Drive onde ficam os arquivos
var PLANILHA_ID = 'COLE_AQUI_ID_DA_PLANILHA';// ID da planilha de saída
var ABA_PLANILHA = 'Sheet1';                 // nome da aba

// Opcional: chave da Cloud Vision API (se você preferir/precisar usar Vision em vez do Drive.Files.insert)
// Se vazio (""), o script tentará usar Drive.Files.insert; caso não esteja disponível, vai lançar erro.
var API_KEY = ''; // "SUA_API_KEY_AQUI"

// --------- FUNÇÃO PRINCIPAL ---------
function processarNotasGenerico() {
  var pasta = DriveApp.getFolderById(PASTA_ID);
  var sheet = SpreadsheetApp.openById(PLANILHA_ID).getSheetByName(ABA_PLANILHA);
  if (!sheet) sheet = SpreadsheetApp.openById(PLANILHA_ID).insertSheet(ABA_PLANILHA);

  // cria/pega subpasta Processados
  var subPastas = pasta.getFoldersByName('Processados');
  var pastaProcessados = subPastas.hasNext() ? subPastas.next() : pasta.createFolder('Processados');

  var arquivos = pasta.getFiles();
  while (arquivos.hasNext()) {
    var arquivo = arquivos.next();
    var tipo = arquivo.getMimeType();
    var nomeArquivo = arquivo.getName();
    var urlArquivo = arquivo.getUrl();

    Logger.log('Processando: ' + nomeArquivo + ' (' + tipo + ')');

    if (tipo !== 'image/jpeg' && tipo !== 'image/png' && tipo !== 'application/pdf') {
      Logger.log('Pulando (tipo não suportado): ' + nomeArquivo);
      continue;
    }

    try {
      var texto = '';

      // Rota 1: se Drive.Files.insert estiver disponível, usa OCR do Drive
      if (typeof Drive !== 'undefined' && Drive.Files && typeof Drive.Files.insert === 'function') {
        Logger.log('Usando Advanced Drive Service (Drive.Files.insert) para OCR.');
        var resource = { title: nomeArquivo, mimeType: MimeType.GOOGLE_DOCS };
        var docFile = Drive.Files.insert(resource, arquivo.getBlob(), { ocr: true });
        texto = DocumentApp.openById(docFile.id).getBody().getText();
        // remover temporário
        DriveApp.getFileById(docFile.id).setTrashed(true);

      } else if (API_KEY && API_KEY.length > 10) {
        // Rota 2: usar Cloud Vision API via UrlFetch
        Logger.log('Drive.Files.insert não disponível; usando Cloud Vision API.');
        texto = ocrViaVisionAPI(arquivo.getBlob());

      } else {
        throw new Error('Nenhum método de OCR disponível. Habilite Advanced Drive Service ou informe API_KEY.');
      }

      Logger.log('Texto OCR (início):\n' + (texto ? texto.substring(0, 500) : '[vazio]'));

      // Extrair dados (exemplos simples)
      var data = texto.match(/\d{2}\/\d{2}\/\d{4}/);
      var valorRaw = texto.match(/R\$?\s?[\d\.,]+/);
      var valor = valorRaw ? valorRaw[0] : '';
      var cnpj = texto.match(/\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2}/);
      var cpf = texto.match(/\d{3}\.\d{3}\.\d{3}-\d{2}/);

      sheet.appendRow([
        data ? data[0] : '',
        valor || '',
        cnpj ? cnpj[0] : (cpf ? cpf[0] : ''),
        nomeArquivo
      ]);

      // inserir link na coluna do arquivo (última linha)
      var ultima = sheet.getLastRow();
      sheet.getRange(ultima, 4).setRichTextValue(
        SpreadsheetApp.newRichTextValue().setText(nomeArquivo).setLinkUrl(urlArquivo).build()
      );

      // mover para Processados
      pastaProcessados.addFile(arquivo);
      pasta.removeFile(arquivo);

    } catch (e) {
      Logger.log('Erro no arquivo ' + nomeArquivo + ': ' + e.message);
    }
  }
}

// --------- Função OCR via Cloud Vision (opcional) ---------
function ocrViaVisionAPI(blob) {
  var url = 'https://vision.googleapis.com/v1/images:annotate?key=' + API_KEY;
  var payload = {
    requests: [
      {
        image: { content: Utilities.base64Encode(blob.getBytes()) },
        features: [{ type: 'DOCUMENT_TEXT_DETECTION', maxResults: 1 }]
      }
    ]
  };

  var options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  var resp = UrlFetchApp.fetch(url, options);
  var code = resp.getResponseCode();
  if (code !== 200) {
    throw new Error('Vision API falhou. HTTP ' + code + ' — ' + resp.getContentText().substring(0, 500));
  }

  var json = JSON.parse(resp.getContentText());
  return json.responses && json.responses[0] && (json.responses[0].fullTextAnnotation ? json.responses[0].fullTextAnnotation.text : '') || '';
}

/*
  OBS: extrações por regex são simples e podem precisar ser adaptadas para seus recibos.
  Recomendo testar com amostras reais e ajustar os padrões de busca conforme necessário.
*/
